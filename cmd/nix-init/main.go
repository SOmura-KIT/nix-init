package main

import (
	"fmt"
	"log"
	"os"
	"strings"

	"github.com/urfave/cli/v2"

	"github.com/SOmura-KIT/nix-init/internal/lang"
	"github.com/SOmura-KIT/nix-init/internal/lang/clang"
	"github.com/SOmura-KIT/nix-init/internal/lang/deno"
	"github.com/SOmura-KIT/nix-init/internal/lang/golang"
	"github.com/SOmura-KIT/nix-init/internal/lang/latex"
	"github.com/SOmura-KIT/nix-init/internal/lang/node"
	"github.com/SOmura-KIT/nix-init/internal/lang/python"
)

type Template struct {
	Name        string
	BuildInputs []string
}

func main() {
	app := cli.NewApp()
	app.Name = "nix-init"
	app.Usage = "Generate nix-shell init script"
	app.Action = Generate
	app.Flags = []cli.Flag{
		&cli.StringFlag{
			Name:    "path",
			Aliases: []string{"o"},
			Usage:   "Place the output into `FILE`.",
			Value:   "shell.nix",
		},
		&cli.StringFlag{
			Name:    "name",
			Aliases: []string{"n"},
			Usage:   "Set the name of the nix-shell",
			Value:   "Template",
		},
		&cli.BoolFlag{
			Name:    "envrc",
			Aliases: []string{"e"},
			Usage:   "Generate .envrc file",
		},
		&cli.BoolFlag{
			Name:    "force",
			Aliases: []string{"f"},
			Usage:   "Overwrite existing files",
		},
		&cli.BoolFlag{
			Name:    "interactive",
			Aliases: []string{"i"},
			Usage:   "Ask for confirmation before overwriting",
		},
		&cli.BoolFlag{
			Name:    "pretend",
			Aliases: []string{"p"},
			Usage:   "Print the generated script to stdout",
		},
		&cli.BoolFlag{
			Name:  "dev-tools",
			Usage: "Generate development tools",
		},
	}
	err := app.Run(os.Args)
	if err != nil {
		log.Fatal(err)
		os.Exit(1)
	}
}

func Generate(c *cli.Context) error {
	template := Template{Name: c.String("name")}

	pkgs := InitPkgs()
	for _, arg := range c.Args().Slice() {
		if pkg, ok := pkgs[arg]; ok {
			template.BuildInputs = append(template.BuildInputs, pkg.Pkg()...)
			if c.Bool("dev-tools") {
				template.BuildInputs = append(template.BuildInputs, pkg.Tools()...)
			}
		} else {
			return cli.Exit("Unsupported package: "+arg, 1)
		}
	}

	text := GenText(template)
	byteText := []byte(text)

	if c.Bool("pretend") {
		fmt.Println(text)
		return nil
	}

	shell_nix, err := os.Create(c.String("path"))
	if err != nil {
		return err
	}
	defer shell_nix.Close()

	if _, err := shell_nix.Write(byteText); err != nil {
		return err
	}

	if c.Bool("envrc") {
		envrc, err := os.Create(".envrc")
		if err != nil {
			return err
		}
		defer envrc.Close()
		if _, err := envrc.Write([]byte("use_nix")); err != nil {
			return err
		}
	}

	return nil
}

func InitPkgs() map[string]lang.Languager {
	return map[string]lang.Languager{
		"clang":  clang.New(),
		"deno":   deno.New(),
		"golang": golang.New(),
		"latex":  latex.New(),
		"node":   node.New(),
		"python": python.New(),
	}
}

func GenText(template Template) string {
	lines := []string{
		"# Generated by nix-init",
		"{ pkgs ? import <nixpkgs> {} }:",
		"",
		"pkgs.mkShell {",
		"  name = \"" + template.Name + "\";",
		"",
		"  buildInputs = with pkgs; [",
	}
	for _, input := range template.BuildInputs {
		lines = append(lines, "    "+input)
	}
	lines = append(lines, "  ];")
	lines = append(lines, "}")

	return strings.Join(lines, "\n")
}
